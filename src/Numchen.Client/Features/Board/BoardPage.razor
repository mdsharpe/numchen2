@page "/play/{GameType}"

@implements IDisposable
@inject GameState State
@inject NavigationManager NavigationManager

<div class="board">

    <NextCard Value="State.NextCard"></NextCard>

    <div class="board__columns">
        @foreach (var (col, i) in State.Board.Columns.Select((o, i) => (o, i)))
        {
            <Column Index="i" Cards="col.Reverse()"
                OnAddClickCallback="@OnColumnAddClick"
                OnRemoveClickCallback="@OnColumnRemoveClick"></Column>
        }
    </div>

    <div class="board__goals">
        @foreach (var goal in State.Board.Goals)
        {
            <Goal Value="goal"></Goal>
        }
    </div>

</div>

@code {
    [Parameter]
    public string? GameType { get; set; }

    protected override void OnInitialized()
    {
        if (!Enum.TryParse<GameType>(GameType, ignoreCase: true, out var gameType))
        {
            NavigationManager.NavigateTo("/play");
        }

        State.OnChange += StateHasChanged;
        State.Initialize(gameType);
    }

    void IDisposable.Dispose()
    {
        State.OnChange -= StateHasChanged;
    }

    private async Task OnColumnAddClick(int columnIndex)
    {
        await State.MoveCurrentToColumn(columnIndex);
    }

    private async Task OnColumnRemoveClick(int columnIndex)
    {
        await State.RemoveFromColumn(columnIndex);
    }
}
